#version 430

// constants
// limit is 256, since otherwise integer overflow occurs in prefix sum step
// --> 32/4 = 8, and 2^8 is a maximum of 256
#define SORT_BLOCK_SIZE ((SORT_BLOCK_SIZE))
#define SORT_BUFFER_CAPACITY ((SORT_BUFFER_CAPACITY))

#define SORT_INPUT_BUFFER_BINDING ((SORT_INPUT_BUFFER_BINDING))
#define SORT_LOCAL_RANKS_BUFFER_BINDING ((SORT_LOCAL_RANKS_BUFFER_BINDING))
#define SORT_BLOCK_SUM_BUFFER_BINDING ((SORT_BLOCK_SUM_BUFFER_BINDING))

const uint BLOCK_SUM_BUCKET_LENGTH = (SORT_BUFFER_CAPACITY + SORT_BLOCK_SIZE - 1) / SORT_BLOCK_SIZE;
const uint BLOCK_SUM_LENGTH = BLOCK_SUM_BUCKET_LENGTH * 4;
const uint UINT_MAX = 0xFFFFFFFFu;

// buffers
layout(local_size_x=SORT_BLOCK_SIZE) in;
layout(std430, binding=SORT_INPUT_BUFFER_BINDING) buffer InputBuffer {
    uint in_keys[SORT_BUFFER_CAPACITY];
    uint in_values[SORT_BUFFER_CAPACITY];
};
layout(std430, binding=SORT_LOCAL_RANKS_BUFFER_BINDING) buffer LocalRanks {
    uint local_ranks[SORT_BUFFER_CAPACITY];
};
layout(std430, binding=SORT_BLOCK_SUM_BUFFER_BINDING) buffer BlockSums {
    uint block_sums[BLOCK_SUM_LENGTH];
};

// uniforms
uniform uint num_elements; // # of elements to be sorted
uniform uint current_pass; // current pass of radix sort

// element scans
shared uint loc_scan[SORT_BLOCK_SIZE];

shared uint loc_bucket_sums;
shared uint loc_bucket_scan[4];

shared uint shuffled_keys[SORT_BLOCK_SIZE];
shared uint shuffled_values[SORT_BLOCK_SIZE];

// helper func to clear a byte
uint clear_packed(uint dst, uint i) { return dst & ~(0xFFu << (i * 8)); }

// helper func to pack a byte value into one of four parts of a 32 bit int
// clears dst and then uses or to set it in the dst bit
uint write_packed(uint dst, uint src, uint i) { return clear_packed(dst, i) | (src << (i * 8)); }

// helper func to get a byte value stored in a 32 bit int
// shifts src and then ands the unnecessary values with 0
uint read_packed(uint src, uint i) { return (src >> (i * 8)) & 0xFFu; }

// helper func to add two packed byte values
uint add_packed(uint dst, uint a, uint b, uint i) {
    return write_packed(dst, (read_packed(a, i) + read_packed(b, i)) & 0xFFu, i);
}

void scan(uint tid, uint bucket) {
    // up sweep step
    // --> works by setting sums[0] as the root of the binary tree and
    //     iteratively summing the leaf nodes, then working its way up to the root
    for (uint offset = 1; offset < SORT_BLOCK_SIZE; offset *= 2) {
        uint bi = 2 * (tid + 1) * offset - 1;
        if (bi < SORT_BLOCK_SIZE)
            loc_scan[bi] = add_packed(loc_scan[bi], loc_scan[bi], loc_scan[bi - offset], bucket);
        barrier();
    }

    // last element = total sum, write to block sums
    if (tid == 0) {
        uint unpacked = loc_scan[SORT_BLOCK_SIZE - 1];

        // read the packed bucket value from the array
        uint bucket_count = read_packed(unpacked, bucket);

        // write to local and global block counts
        loc_bucket_sums = write_packed(loc_bucket_sums, bucket_count, bucket);
        uint bs_idx = bucket * BLOCK_SUM_BUCKET_LENGTH + gl_WorkGroupID.x;
        block_sums[bs_idx] = bucket_count;

        // clear the element for an exclusive scan
        loc_scan[SORT_BLOCK_SIZE - 1] = clear_packed(unpacked, bucket);
    } barrier();

    // down sweep step
    // --> basically just the opposite of the upsweep
    for (uint offset = SORT_BLOCK_SIZE / 2; offset > 0; offset /= 2) {
        uint bi = 2 * (tid + 1) * offset - 1;
        if (bi < SORT_BLOCK_SIZE) {
            uint ai = bi - offset;
            uint temp = loc_scan[ai];
            loc_scan[ai] = write_packed(loc_scan[ai], read_packed(loc_scan[bi], bucket), bucket);
            loc_scan[bi] = add_packed(loc_scan[bi], loc_scan[bi], temp, bucket);
        } barrier();
    }
}

void main() {
    uint tid = gl_LocalInvocationID.x;
    uint gid = gl_GlobalInvocationID.x;

    // get the element from the input array
    uvec2 elem = gid < num_elements ? uvec2(in_keys[gid], in_values[gid]) : uvec2(UINT_MAX, 0);

    // calc the radix from the key
    uint radix = (elem.x >> (current_pass * 2)) & 0x3u;
    barrier();

    // 4-way prefix sum
    for (uint b = 0; b < 4; b++) {
        // init counts for each bucket
        loc_scan[tid] = write_packed(loc_scan[tid], radix == b ? 1 : 0, b);
        barrier();

        // run exclusive scan
        scan(tid, b);
        barrier();
    }

    // write the computed prefix sum for this element to the global rank buffer
    local_ranks[gid] = read_packed(loc_scan[tid], radix);
}