#version 430

// constants
// limit is 256, since otherwise integer overflow occurs in prefix sum step
// --> 32/4 = 8, and 2^8 is a maximum of 256
#define SCAN_BLOCK_SIZE ((SCAN_BLOCK_SIZE))
#define SCAN_INPUT_BUFFER_BINDING ((SCAN_INPUT_BUFFER_BINDING))
#define SCAN_BLOCK_SUM_BUFFER_BINDING ((SCAN_BLOCK_SUM_BUFFER_BINDING))

// buffers
layout(local_size_x=SCAN_BLOCK_SIZE) in;
layout(std430, binding=SCAN_INPUT_BUFFER_BINDING) buffer InputBuffer {
    uint in_values[];
};
layout(std430, binding=SCAN_BLOCK_SUM_BUFFER_BINDING) buffer BlockSums {
    uint block_sums[];
}; // assume buffer is rebinded to a different offset each pass

//

// total elements to be scanned
uniform uint num_elements;
uniform uint input_offset;
uniform uint block_sums_offset;

// shared elements
shared uint loc_scan[SCAN_BLOCK_SIZE];

void main() {
    uint gid = gl_GlobalInvocationID.x;
    uint tid = gl_LocalInvocationID.x;

    // copy element from global to shared memory
    loc_scan[tid] = gid < num_elements ? in_values[gid + input_offset] : 0;
    barrier();

    // up sweep step
    // --> works by setting sums[0] as the root of the binary tree and
    //     iteratively summing the leaf nodes, then working its way up to the root
    for (uint offset = 1; offset < SCAN_BLOCK_SIZE; offset *= 2) {
        uint bi = 2 * (tid + 1) * offset - 1;
        if (bi < SCAN_BLOCK_SIZE) loc_scan[bi] += loc_scan[bi - offset];
        barrier();
    }

    // set last element to 0 for exclusive scan and update the block scans
    if (tid == 0) {
        block_sums[gl_WorkGroupID.x + block_sums_offset] = loc_scan[SCAN_BLOCK_SIZE - 1];
        loc_scan[SCAN_BLOCK_SIZE - 1] = 0;
    } barrier();

    // down sweep step
    // --> basically just the opposite of the upsweep
    for (uint offset = SCAN_BLOCK_SIZE / 2; offset > 0; offset /= 2) {
        uint bi = 2 * (tid + 1) * offset - 1;
        if (bi < SCAN_BLOCK_SIZE) {
            uint ai = bi - offset;
            uint temp = loc_scan[ai];
            loc_scan[ai] = loc_scan[bi];
            loc_scan[bi] += temp;
        } barrier();
    }

    //
    if (gid < num_elements)
        in_values[gid + input_offset] = loc_scan[tid];
}